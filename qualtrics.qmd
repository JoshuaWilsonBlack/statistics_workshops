# Loading Data from Qualtrics

::: {.callout-note}

This section has been written to feed in to LING615 - World Englishes and
takes advantage of material prepared for LING310.

:::

To interact with data from [Qualtrics](https://www.qualtrics.com/), we will use
the package `qualtRics`.

If you haven't installed the package, run `install.packages('qualtRics')`.

::: {.callout-note}

This book will have details about creating an R project soon. For now, follow
the checklist below and if you want more detail see https://r4ds.had.co.nz/workflow-projects.html. 

:::

## Set up an R Project

To set up a new R project:

1. Go to `File > New Project`
2. Select 'New Directory' and then 'New Project'
3. Use the `browse` choose a directory for the project (you might
have to create a new one). For instance, `Documents/linguistics_projects/`
then enter a name for the project directory in the `Directory name` box.
4. Press `Create Project`.
5. Create two directories in the project directory:
    1. `data`
    2. `scripts`

We will look at how to load data from csv files generated by Qualtrics.

Place the csv you want to use in the `data` directory. For this exercise
we will use [this csv](/data/Ling310-Week1-2022.csv).

Create an R script and save it in the `scripts` directory.

## Load Data Exported from Qualtrics with `read_survey()`

We can now use the `read_survey` function from the qualtRics package to read
in the data.
```{r}
# load the qualtRics package
library(qualtRics)

# Read in the data. Our file names start from the project directory, so we 
# just say 'data/...' rather than giving the full path.
survey <- read_survey(file_name = 'data/Ling310-Week1-2022.csv') 
```

The output tells us how the columns have been interpreted. We see that the
default is to assume that each column has text in it (see `.default =`
`col_character()`). The exceptions to this are the progress, duration, and
latitude and longitude columns which contain numbers (`col_double()`) and
the finished, name and email columns which contain `TRUE` or `FALSE`. This 
makes sense for the column called `Finished`, but not for names and emails.
We'd better check what is in those columns.

```{r}
# This is a base R approach (if this doesn't mean anything to you, ignore!)

# Look at the summary information...
summary(
  # ...about the subset of...
  subset(
    # ...the survey data...
    survey, 
    # ...consisting of the following columns.
    select = c('RecipientLastName', 'RecipientFirstName', 'RecipientEmail')
  )
)
```

All 17 rows of the data are `NA`. That is, there is no data in these columns.
You can double check that this is right by looking at the csv file in a 
spreadsheet programme. There is no serious problem from reading these empty
columns as 'logical' columns. Some problems are not worth dealing with!

What is actually _in_ this data? Let's look at the first few entries.
```{r}
survey
```

This doesn't tell us much, because there are so many columns. How many? Look
at the top left of the output: there are 17 rows and 40 columns (`17 x 40`).
We see when the participant started and ended the survey, how far through 
they got (`Progress`), how long it took (`` `Duration (in seconds)` ``), 
and whether the participant finished (`Finished`). 

Have a look at the full data set in RStudio's viewer by either clicking on the 
name `survey` in the environment pane (top right) or entering `View(survey)`
in the console. There are a series of columns, one for each question. When
we view in the RStudio viewer we see the text of the question as 'labels' 
underneath the actual variable name (e.g. the variable named `Q23` has the
label 'Does "pool" rhyme with "food"?').

The other way to get at these labels is to use the function 
`sjlabelled::get_label()`. This will output the text label for each variable.

```{r}
sjlabelled::get_label(survey)
```

You may need to scroll right to see the question names in the output.

The bit of code `sjlabelled::` means that we are looking for a name which 
exists within the package `sjlabelled`. You can avoid having to enter this in
by loading the library `sjlabelled` at the start of your script. This is 
entirely up to you.


::: {.webex-check .webex-box}

```{r}
#| output: asis
#| echo: false
opts <- c(
   "Does 'pear' rhyme with 'share'?",
   answer = "Do you think Aucklanders sound different from people from Christchurch?",
   "It doesn't have a label."
)

cat("What is the label of the variable named `Q25`?", longmcq(opts))
```

:::

Let's have a look at the answers for `Q24`:
```{r}
survey$Q24
```
The responses are stored as character strings. Most respondents seem to think
that 'doll' and 'dole' are pronounced the same. We don't have to count these
manually. Use the following code:
```{r}
summary(factor(survey$Q24))
```

There are thirteen respondents who think Aucklanders and people from Christchurch
sound the same and four who don't. 

::: {.webex-box}

What do you think the function `factor` is doing here? See what happens if you
remove it and have a look here: <https://r4ds.hadley.nz/factors.html>

:::

## Data Tidying

## A Plot
