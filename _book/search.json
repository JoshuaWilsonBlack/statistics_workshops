[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NZILBB R and Open Science Workshops",
    "section": "",
    "text": "Preface\nThis ‘book’ will slowly evolve and add contributors as the NZILBB R and Open Science workshops develop. The hope is that this resource will allow people to study at their own pace."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "From the first semester of 2024, we will be running a series of workshops on R at NZILBB. This document will contain materials for the introductory sessions, with another collection for the more advanced sessions.\nThe focus of the workshops is on R and Open Science. The aim is to get you up to speed with the use of R and associated Open Science infrastructure so that your research is maximally reproducible, replicable, and helpful to the wider scientific community. This requires us to learn some programming!\nThis resource will gradually grow as I write up workshops. The ideal is that it will allow people to follow the material at their own pace and/or to catch up to wherever we are at in our tutorial sessions.\nFor UC students and staff, I am happy to talk over any issues you have with this material. Please get in touch with me at joshua.black@canterbury.ac.nz.\nIf you have found your way to this material by some other means, you can also email me!\n\nOther resources\nAt this stage, this is a somewhat disorganised list of texts and video which you may find interesting.\n\nThe alternative to data analysis with a programming language is usually some kind of spreadsheet. Here are some spreadsheet horror stories: https://eusprig.org/research-info/horror-stories/.\nWhy do we have to learn how to program? Why is science ‘amateur software development’? This is a good lecture on the topic: https://www.youtube.com/watch?v=8qzVV7eEiaI.\n\nUsually these techniques aren’t explicitly taught. These workshops are our attempt to respond to this problem!\n\nWhy can’t you do data science with a spreadsheet? https://www.youtube.com/watch?v=cpbtcsGE0OA\nThese workshops have been heavily influenced by Winter (2019)\n\n\n\n\n\nWinter, Bodo. 2019. Statistics for Linguists: An Introduction Using R. New York: Routledge. https://doi.org/10.4324/9781315165547."
  },
  {
    "objectID": "intro.html#reproducibility",
    "href": "intro.html#reproducibility",
    "title": "Introduction",
    "section": "Reproducibility",
    "text": "Reproducibility"
  },
  {
    "objectID": "intro.html#replicability",
    "href": "intro.html#replicability",
    "title": "Introduction",
    "section": "Replicability",
    "text": "Replicability\nThere is a vast literature on the replication crisis.\nOne aspect of the solution is to share …"
  },
  {
    "objectID": "intro.html#preregistration",
    "href": "intro.html#preregistration",
    "title": "Introduction",
    "section": "Preregistration",
    "text": "Preregistration\nIn addition to sharing code and data after the fact, it is important to be able to register hypotheses and predictions before data collection and, if that is not possible, at least before analysis."
  },
  {
    "objectID": "intro.html#why-programming",
    "href": "intro.html#why-programming",
    "title": "Introduction",
    "section": "Why Programming?",
    "text": "Why Programming?\nThings can go wrong with spreadsheets\nhttps://eusprig.org/research-info/horror-stories/ (via Winter)\nWe need to integrate our work with others.\nThis leads to a situation where science is ‘amateur software development’ (in the words of Richard McElreath — see: https://www.youtube.com/watch?v=8qzVV7eEiaI).\ncontinuous integration. teams of programmers. (This is why we will look with git).\ntesting as the majority of code.\n(Also uses kitchen metaphor)\nWe have to get more professional for the sake of science.\n(There’s also a discussion of p-hacking here — some good examples of bad unintentional mistakes)\n\nNeed to replicate your own work as a minimum\n\nprofessional standards as the underlying thought.\nLinks ‘data carpentry’.\n— vs EXCEL (not a tool designed for science and especially for quality control.)\nfamous case of Gene names being changed (theverge.com/2020/8/6/21355674 ( from mcelreath vid))\nNot taught: organising data, curating data, testing data, manage distributed contributions, logically connect hypotheses to data analysis.\nAlso: https://www.youtube.com/watch?v=cpbtcsGE0OA"
  },
  {
    "objectID": "intro.html#why-r",
    "href": "intro.html#why-r",
    "title": "Introduction",
    "section": "Why R?",
    "text": "Why R?\nHere’s some reasons to use R, from better to worse.\n\n**\nNationalism: R was created here in Aotearoa New Zealand. Don’t get too excited though, it was made in Tāmaki Makaurau.\n\nThere are other tools out there. A lot of work in computational linguistics uses the Python programming language (). For projects interacting with contemporary Artificial Intelligence it may be more sensible to use Python than R. Some phoneticians use Matlab."
  },
  {
    "objectID": "getting_started.html#install-r-and-rstudio",
    "href": "getting_started.html#install-r-and-rstudio",
    "title": "1  Getting Started",
    "section": "1.1 Install R and RStudio",
    "text": "1.1 Install R and RStudio\nR is a programming language. RStudio is a piece of software for interacting with R.\nYou don’t have to use RStudio in order to use R, but we will assume you are using it in these workshops.1\nTo install R and RStudio on your own device follow the steps at https://posit.co/download/rstudio-desktop/.\nTo install R and RStudio on a University of Canterbury device:\n\nWindows: open the “Software Center”, search for RStudio, and press the install button.\nMac: open “UC Self Service”, search for RStudio, and press the install button.\n\nInstalling RStudio on a University of Canterbury device will also install R."
  },
  {
    "objectID": "getting_started.html#open-rstudio",
    "href": "getting_started.html#open-rstudio",
    "title": "1  Getting Started",
    "section": "1.2 Open RStudio",
    "text": "1.2 Open RStudio\nIf you have installed RStudio, if should now appear in your start menu on Windows, and your Applications folder and launchpad if you are on macOS. Open it. You should see something like this:\n\n\nThe RStudio interface has four primary ‘panes’. Only three of these will be visible when you first open RStudio. The largest pane is the console pane. It is usually on the bottom left of the RStudio window, but currently takes up the entire left side. We also see the environment pane at the top right and the output pane at the bottom right.\nThe console pane should have a message telling you what version of R you are using and the platform you are on (i.e. your hardware and operating system). This is what you would see if you opened R by itself.2\nThe environment pane should be empty. You will see multiple tabs across the top of this pane. The environment tab will allow us to see the data which we are working with at a given time. At this stage, you may see a tab labelled ‘Tutorial’. I’ll tell you how to use this later (Section 1.6).\nThe output pane will start by showing you a list of files on your computer. This is useful for finding and manipulating files (just like a file browser) In future, it is also where plots and help pages will appear."
  },
  {
    "objectID": "getting_started.html#interact-with-r-in-the-console",
    "href": "getting_started.html#interact-with-r-in-the-console",
    "title": "1  Getting Started",
    "section": "1.3 Interact with R in the Console",
    "text": "1.3 Interact with R in the Console\nWe will get started by interacting with R in the console pane. You should see a &gt; in the console pane. We can enter code here. If the code works, we will see the output immediately below (or perhaps in the output pane, depending on the code). If the code doesn’t work, an error message will appear.\n\n1.3.1 Basic arithmetic\nWe’ll start with some basic arithmetic. We add two numbers together by writing the first number, the + sign, and the second number. Enter the code in the box below after the &gt; in your console. The expected output appears below the box. You should see the same thing in your console after you press enter/return.\n\n1 + 1\n\n[1] 2\n\n\nThe other basic arithmetic operators work in the same way. Subtraction:\n\n500 - 49\n\n[1] 451\n\n\nWe use * for multiplication. We enter real numbers by using a decimal point.\n\n43 * 6.4\n\n[1] 275.2\n\n\nFor exponentiation we use ^ (usually, shift + 6).\n\n924^5\n\n[1] 6.735345e+14\n\n\nThe output given here is in scientific notation. It is important to be able to read this notation when using R. It makes very very small and very very large numbers much easier to write and is often used in the output of R functions. To convert from scientific notation to regular digits, multiple the number which appears before the e by 10 to the power of the number after the e. In this case, we take the number \\(6.735345\\) and multiply it by \\(10^{14}\\) to get \\(673,534,500,000,000\\). That is, six hundred seventy-three trillion and a bit. According to Wikipedia, this is something like the total number of cells in six and a half adult humans and a bit fewer than the number of ants on Earth.\nThere are a few different operators associated with division. Usually, you will want to use /. e.g.:\n\n43 / 7\n\n[1] 6.142857\n\n\nSometimes, it is useful to get the integer component on the answer or the remainder. If we want the integer, we use %/%:\n\n43 %/% 7\n\n[1] 6\n\n\nIf we want the remainder, we use:\n\n43 %% 7\n\n[1] 1\n\n\nThat is, if we divide 43 by 7, we get 6 groups of 7, with 1 remaining.\nComputer programming requires attention to minor details of punctuation and spacing. Hours can be spent trying to discover why code is not working, only to discover a missing comma. This is especially true in the early stages of learning, where error messages can be very confusing.\nIt is worth knowing when you can add spaces and when you can’t. The spaces in the code above between the numbers and the arithmetic operators are not necessary. So, for instance, you could write:\n\n43/7\n\n[1] 6.142857\n\n\nIn fact, you can add however many spaces you like!\n\n34  /    2\n\n[1] 17\n\n\nThe only reason to prefer one over the other is readability. This raises the issue of code style, which we will discuss in future workshops. Note that, above, there wasn’t a space in 924^5—this is a style convention for ^ and some other (‘high precedence’) operators which we will encounter later.3\n\n\n1.3.2 Vectors and Variables\nWe work with large collections of experimental data or values derived from corpora. But the commands we’ve looked at above only deal with two numbers at a time. The simplest structure for dealing with more than one value is a vector.\nWe create vectors using the function c(). The c() function combines values in to a vector.\n\nc(1, 2, 3, 4)\n\n[1] 1 2 3 4\n\n\nThe [1] you see in the output is followed by the first element of the vector. If you print out a very long vector you will see numbers other than 1 inside the square brackets. For instance:\n\n60:124\n\n [1]  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78\n[20]  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97\n[39]  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116\n[58] 117 118 119 120 121 122 123 124\n\n\nThe : operator produces a vector from the first number to the second number (inclusive) in steps of one. The resulting output is long enough that it has to go across two lines. When the new line starts you will see another number in square brackets. This tells you how far through the vector you are at the line break. Exactly which number it is will vary according to the system you are using. For me, currently editing this text in RStudio, it is [38]. That is, the number which follows [38] is the 38th number in the vector.\nWe call the values in a vector the elements of the vector. The elements of a vector have to be the same type of thing. We’ll talk about types more later. For now, just note that a number is a different kind of thing from a string of characters. So, what happens if we try to mix numbers and strings in a vector?\n\nc(1, 2, 3, \"dog\")\n\n[1] \"1\"   \"2\"   \"3\"   \"dog\"\n\n\nR hasn’t explicitly complained, but it has done something without telling you what it has done. The numbers we entered now have quotation marks around them. They have been turned in to strings. Keep an eye out for quotation marks — sometimes you might think you are dealing with numbers, but really you are dealing with strings. This is a common problem when loading up your own data.\nWhy worry? Well, your code likely won’t work if you have strings rather than numbers. For instance, you can’t apply arithmetic operators to strings.\n\n\"1\" + \"2\"\n\nError in \"1\" + \"2\": non-numeric argument to binary operator\n\n\nThe above is the first error message you’ve seen in this course. You will see many more in your time working with R. The error message is telling you that what you are doing does not work on anything but numbers.\nVectors can also be used for arithmetic. Under the hood, statistics is mostly arithmetic with collections of vectors. How are these arithmetic operations implemented in R?\nThe simplest case is when we use a vector and a single number, as follows\n\n2 * c(1, 2, 3, 4)\n\n[1] 2 4 6 8\n\n\nEach element of the vector has been multiplied by \\(2\\). The same is true of addition, division, and subtraction. These are ‘element-wise’ operations. That is, they are applied to each element individually.\n\n3 / c(1, 2, 3, 4)\n\n[1] 3.00 1.50 1.00 0.75\n\n\nThis also works with two vectors. For instance:\n\nc(1, 2, 3, 4) * c(1, 2, 3, 4)\n\n[1]  1  4  9 16\n\n\nHere we get the first elements multiplied together, then the second, then the third, and so on.\nIf one vector is shorter than the other, is will be ‘recycled’ to match the longer vector:\n\nc(1, 2) * c(1, 2, 3, 4)\n\n[1] 1 4 3 8\n\n\nYou do not want to be entering the same vector over and over again. This is where variables come in. Variables allow us to associate names with values.\nTo assign an object to a name, we use &lt;-. For instance:\n\nmy_cool_vector &lt;- c(6, 9, 4, 5, 2, 2)\n\nNow the name my_cool_vector is associated with the vector c(6, 9, 4, 5, 2, 2). If you look to the top right of the RStudio window you should now see this variable in your environment pane. The name will be on the right and the value on the left.\n\n\n\nOur cool vector in the RStudio environment pane. Your screen may look a little different.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIn most cases you can also use = to assign an object to a name. This may seem more natural to you if you are coming from another programming languages. The convention is to use &lt;-. Sometimes = takes on a different function, but &lt;- is always assignment of an object to a name.\n\n\nWe can now apply operations using the name. For instance:\n\n4 * my_cool_vector\n\n[1] 24 36 16 20  8  8\n\n\nTo see what object is associated with a name we can look in the environment pane or simply enter the name into the console.\n\nmy_cool_vector\n\n[1] 6 9 4 5 2 2\n\n\nNaming variables is serious business. It is important to know what you could do and what you should do.\nR institutes the following rules for names:\n\nA name must consist of letters, digits, ., and _.\nIt cannot begin with digits or _.\nIt cannot come from a list of reserved words (e.g. TRUE — these names have important roles in R and can’t be overridden.)\n\n\n\n\n\n\n\nNote\n\n\n\nWhat counts as a ‘letter’ varies by operating system and local settings (your ‘locale’). The recommendation from Hadley Wickham is that you only use ASCII letters (for instance, avoid use of any diacritics/accents).4\nOne local reason you might want to use non-ASCII characters is if you want to use te reo Māori with macrons for your variable names. This might be appropriate for a particular project (the question is always who you want to share your code with). Pretty much anyone using a modern operating system should be able to use your code. You may decide that the small risk of incompatibility is worth it in this case.\n\n\nI follow the convention of using _ rather than . in my variable names. So, e.g., I’d prefer my_cool_vector over my.cool.vector. This reduces ambiguity in some cases.\nWhile we are talking about naming, R will accept anything placed within backticks (‘`’) as a variable name. If you have a chaotic temperament, you might decide to use variable names like this:\n\n# Eldritch variable\n`t̸̡͚̳͓̜̘̪̙̟̣͛̋̈̐͜ḩ̷̛̗̬̪̔̾͋̌̂̓͑̔̚͝ë̵̮̟̟̼̲̦͙̠̟́͋̇̏̓ ̶̟̱̲̠͎̙̠̆̑̈́̉̆̏̋͠͠t̷̲͉͔̘̬̪͖̗́͌̏̉̏̄͊̍̽͋̈̈́̀͝͠o̵͚͙̮͙͉̱̱͕̗̘̻͋͋͋̀́̒͝ͅw̸͖͚̖̣̭̥͍̹͚̞͕̺͇͙͌͛͋̆̿̈́̎̆̋̑͌̏͘͠͝e̵͖̝̞̙͕̤̅̃̓r̴͍̼̱̜̹͚̎̌̂͆͗̏́ṡ̷͔͉͇͗̍̆̔̕ͅ ̷̪̱̞͈̰̈́͜ǫ̷̤͍̫̠̻̣̪̻͖̒̈́͐͂̿̆̑̄̂͘f̶̠͉̯̪̪̖̦͋͝ ̶̙̻̝͆̈͠C̴̳̪̪̻̫̬̳̜̅͑̇͌̆̕a̶̡͚̼͍̺͂̈́̄r̷̨̛̛̜̹͙̲̝̲̖͍̓̊͒̄̓̏͂͐͛͑̊͘c̸͇̲̲͈͕͉͍̗̐ơ̵̟̠̒̔͑͆s̶̨̢̱̱̲͇͉̪̻̖̠͊̈́̐͋́̈́͜a̸̗̩̯̳̝͈̰̅͒̂̏͛̽̓͑̈́̾ͅ ̷̢͎͎̳̖̤̥̜̀̑̈́̈́r̴̦͌͛͘o̴̩̩̯̤̝̊͗̿̉͗͂͂̆̈́͘s̶͔̼̞̱̻̭̻͑̔͛̔ḙ̸̢̀̎͗̓͊̈̊̉̚̚͝ ̸̠̰̞̬̐̆̽̅̀̈̂̌͠b̶̧̜̟͍͔̘̥͇̈́͒̃͒̈́͊̓̉́̉̐͘͘͝͝ę̵͚̀̈́̿̌̆̈́͘̕͠͝ͅh̸̛͎̱͚͕̹̘̥̠͕̟̼͝ͅî̶̞̹̺̰̎̿̊̽͒͑͑̽͝n̵̢̢̛̛̟͓̗̮̦̪̥̩͓̪̘͗͗̑̊̌̉̂͊͠͝d̵͎̭̤̲͋͌̃̎̊ ̷̧̧̛̤͇̫̝̗̻͚̐̊̈́̇̂͗̋t̵͓̻̦̻̗͇̜̼̻̫̼̭̄́͘̚h̵̨̅̉̄e̸̡̡̨̞̪̝̝̟͔̞̞͔̰̒̓͆̐͛̂̒͂̊̆̽̃̌͘ ̴̛̦̖̖̖̹̖̹̣̳̕m̶̡͉̦̣͉̳̪͖͕͍͙̪̟͌̍̏͆̐̄̂̚͘o̸̭̯̠̭͎̖͐͗̏̉͋̅͊̓̓̂̏̓̏̍͝ǫ̴͖͈̖̣̤͍̝̩̳̪̔͂̋̄̑̏̒̏̏̈́ñ̸̙̪͉͓̼̯̩͋̋̌̏̃͘̕͘.̵̙̮̾̐͠ͅ` &lt;- 10\n\n# Spooky variable\n`👻` &lt;- 5\n\nAnd you could even do some maths with these variables:\n\n`t̸̡͚̳͓̜̘̪̙̟̣͛̋̈̐͜ḩ̷̛̗̬̪̔̾͋̌̂̓͑̔̚͝ë̵̮̟̟̼̲̦͙̠̟́͋̇̏̓ ̶̟̱̲̠͎̙̠̆̑̈́̉̆̏̋͠͠t̷̲͉͔̘̬̪͖̗́͌̏̉̏̄͊̍̽͋̈̈́̀͝͠o̵͚͙̮͙͉̱̱͕̗̘̻͋͋͋̀́̒͝ͅw̸͖͚̖̣̭̥͍̹͚̞͕̺͇͙͌͛͋̆̿̈́̎̆̋̑͌̏͘͠͝e̵͖̝̞̙͕̤̅̃̓r̴͍̼̱̜̹͚̎̌̂͆͗̏́ṡ̷͔͉͇͗̍̆̔̕ͅ ̷̪̱̞͈̰̈́͜ǫ̷̤͍̫̠̻̣̪̻͖̒̈́͐͂̿̆̑̄̂͘f̶̠͉̯̪̪̖̦͋͝ ̶̙̻̝͆̈͠C̴̳̪̪̻̫̬̳̜̅͑̇͌̆̕a̶̡͚̼͍̺͂̈́̄r̷̨̛̛̜̹͙̲̝̲̖͍̓̊͒̄̓̏͂͐͛͑̊͘c̸͇̲̲͈͕͉͍̗̐ơ̵̟̠̒̔͑͆s̶̨̢̱̱̲͇͉̪̻̖̠͊̈́̐͋́̈́͜a̸̗̩̯̳̝͈̰̅͒̂̏͛̽̓͑̈́̾ͅ ̷̢͎͎̳̖̤̥̜̀̑̈́̈́r̴̦͌͛͘o̴̩̩̯̤̝̊͗̿̉͗͂͂̆̈́͘s̶͔̼̞̱̻̭̻͑̔͛̔ḙ̸̢̀̎͗̓͊̈̊̉̚̚͝ ̸̠̰̞̬̐̆̽̅̀̈̂̌͠b̶̧̜̟͍͔̘̥͇̈́͒̃͒̈́͊̓̉́̉̐͘͘͝͝ę̵͚̀̈́̿̌̆̈́͘̕͠͝ͅh̸̛͎̱͚͕̹̘̥̠͕̟̼͝ͅî̶̞̹̺̰̎̿̊̽͒͑͑̽͝n̵̢̢̛̛̟͓̗̮̦̪̥̩͓̪̘͗͗̑̊̌̉̂͊͠͝d̵͎̭̤̲͋͌̃̎̊ ̷̧̧̛̤͇̫̝̗̻͚̐̊̈́̇̂͗̋t̵͓̻̦̻̗͇̜̼̻̫̼̭̄́͘̚h̵̨̅̉̄e̸̡̡̨̞̪̝̝̟͔̞̞͔̰̒̓͆̐͛̂̒͂̊̆̽̃̌͘ ̴̛̦̖̖̖̹̖̹̣̳̕m̶̡͉̦̣͉̳̪͖͕͍͙̪̟͌̍̏͆̐̄̂̚͘o̸̭̯̠̭͎̖͐͗̏̉͋̅͊̓̓̂̏̓̏̍͝ǫ̴͖͈̖̣̤͍̝̩̳̪̔͂̋̄̑̏̒̏̏̈́ñ̸̙̪͉͓̼̯̩͋̋̌̏̃͘̕͘.̵̙̮̾̐͠ͅ` + `👻`\n\n[1] 15\n\n\nUnsurprisingly, if you try this without the backticks, you will get an error:\n\n👻 &lt;- 5\n\nError: &lt;text&gt;:1:1: unexpected input\n1: 👻\n    ^\n\n\nDo not take advantage of backticks to use names like this.\nWhy am I even telling you about backticks? They often appear in practice as a result of importing data from a spreadsheet. Usually they appear because the column names in the spreadsheet have spaces in them. One of the first things to do when tidying up data loading from a spreadsheet is to change the names.\n\n\n1.3.3 Exercises\n\nWhat is the output of 5:10?\n\n c(5, 10) [1]  5  6  7  8  9 10 [1]  5  6  7  8  9\n\nWhat is the output of 10 * c(1, 2)?\n\n [1] 10 20 [1]  30 Error in 10 * c(1, 2) : non-numeric argument to binary operator\n\nLook at the variable names in the following list. Some of them are very bad names for stylistic reasons, but will they be accepted by R? I.e., are they syntactically valid?\n\nnz_vowels TRUEFALSE\n_nz_vowels TRUEFALSE\n🥝_vowels TRUEFALSE\n`🥝_vowels\\` TRUEFALSE\nTraditional languages should be taught in school TRUEFALSE\nTraditional.languages_should_be.taught.in_school TRUEFALSE\nin_school TRUEFALSE\n5_points_attitude TRUEFALSE\nattitude_5 TRUEFALSE\n::::: TRUEFALSE\nfunction TRUEFALSE"
  },
  {
    "objectID": "getting_started.html#start-an-r-script",
    "href": "getting_started.html#start-an-r-script",
    "title": "1  Getting Started",
    "section": "1.4 Start an R Script",
    "text": "1.4 Start an R Script\nIf we just used R in the console, we would be in no better position than if we just used Excel or another spreadsheet programme. We want to be able to retrace our steps and for other researchers to be able to retrace our steps.\nOpen a new R script by ….\nCOMMENTS\n\n1.4.1 Matrices and Dataframes\n\n\n1.4.2 Functions and Packages\n\n\n1.4.3 Install and Use a Package\nOne of the great advantages of R is that it has a large community of developers making ‘packages’ to share their code. Packages allow us to cumulatively build on each others work and to do things quickly which might otherwise take a lot of time and statistical knowledge to achieve.\nWell start with a silly package: cowsay.5"
  },
  {
    "objectID": "getting_started.html#modify-rstudio-defaults",
    "href": "getting_started.html#modify-rstudio-defaults",
    "title": "1  Getting Started",
    "section": "1.5 Modify RStudio Defaults",
    "text": "1.5 Modify RStudio Defaults\nThere are many useful options which you might want to change to improve your RStudio experience.\nFirst, there are a series of aesthetic options. …\nSecond, I’m going to assert that you should change some settings now without properly explaining myself. I trust that the reasons for these changes should become clear soon."
  },
  {
    "objectID": "getting_started.html#sec-gs-additional",
    "href": "getting_started.html#sec-gs-additional",
    "title": "1  Getting Started",
    "section": "1.6 Additional Resources",
    "text": "1.6 Additional Resources\nTry the tutorials from learnr. RStudio contains inbuilt tutorials, which you may find useful!\nThese also provide you with an opportunity to\nIt’s always a good idea to have a look at the RStudio documentation: https://docs.posit.co/ide/user/.\nChapter … winter.\nIf you want to be a bit more technical about the syntax of R, have a look the documentation here: https://www.stat.auckland.ac.nz/~paul/ItDT/HTML/node75.html; or in even more detail here: https://cran.r-project.org/doc/manuals/r-devel/R-lang.html"
  },
  {
    "objectID": "getting_started.html#sec-alternatives",
    "href": "getting_started.html#sec-alternatives",
    "title": "1  Getting Started",
    "section": "1.7 Alternatives to RStudio",
    "text": "1.7 Alternatives to RStudio\nYou can write R code in any text editor which you like. Popular options with more or less integration of R include:\n\nVisual Studio Code\nESS (i.e. Emacs Speaks Statistics).\n\nWe won’t discuss these alternatives in these workshops. The most likely reason for you to use one of them is that you are already a keen programmer with strong preferences concerning your tools."
  },
  {
    "objectID": "getting_started.html#footnotes",
    "href": "getting_started.html#footnotes",
    "title": "1  Getting Started",
    "section": "",
    "text": "For alternatives which you might explore see Section 1.7↩︎\nTry this. You should find a shortcut to open R in the Start menu on Windows or the Launchpad in macOS. On Linux or macOS you can also open a terminal window, type ‘r’, and press enter.↩︎\nYou might want to look at this page: https://style.tidyverse.org/. I try to follow this style guide as much as possible.↩︎\nSee (https://adv-r.hadley.nz/names-values.html)↩︎\nI first became aware of this package through a tutorial produced by Kevin Watson.↩︎"
  },
  {
    "objectID": "rstudio_server.html",
    "href": "rstudio_server.html",
    "title": "2  RStudio Server",
    "section": "",
    "text": "Academics at the University of Canterbury can use the RStudio Server.\nAs of this writing writing… [details]\nCurrent details"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Winter, Bodo. 2019. Statistics for Linguists: An Introduction Using\nr. New York: Routledge. https://doi.org/10.4324/9781315165547."
  }
]